/**
 *
 * @param schema: form schema generated by the gateway
 * @param data: form data generated by react-hook-form
 * @param object: objectEntity, if editing
 */
export const mutateObjectFormData = (schema: any, data: any, object?: any) => {
  const objectValues: any[] = [];

  Object.entries(data).forEach(([key, _value], idx) => {
    const value = _value as any;
    const objectValue: any = {};

    const attribute = schema.attributes[schema.attributes.findIndex((a: any) => a.name === key)];

    if (!attribute) return;

    if (!object) {
      objectValue.attribute = `/admin/attributes/${attribute.id}`;
    }

    if (object) {
      const current = object.objectValues.find((oV: any) => oV.attribute.name === key);
      objectValue.id = `/admin/values/${current.id}`;
    }

    if (typeof value === "object" && value.value) {
      objectValue.simpleArrayValue = [value.value];

      objectValue.stringValue = JSON.stringify([value.value]);
    }

    if (Array.isArray(value)) {
      objectValue.simpleArrayValue = value.map((v: any) => v.value);
      objectValue.stringValue = JSON.stringify(value.map((v: any) => v.value));
    }

    if (!Array.isArray(value) && typeof value !== "object") {
      objectValue.stringValue = `${value}`;
    }

    /**
     * Whenever the .type !== string we need to push the actual value to objectValue
     * The stringValue declared above, is required in any and all types
     */
    if (value) {
      switch (attribute.type) {
        case "string":
          // already set; do nothing
          break;
        case "date":
          console.log({ value });
          objectValue.dateTimeValue = value;
          break;
        case "integer":
          objectValue.integerValue = parseInt(value, 10);
          break;
        default: // development purposes
          console.info(attribute.type);
          break;
      }
    }

    objectValues.push(objectValue);
  });

  const objects = schema.attributes.filter((a: any) => a.type === "object");

  return {
    entity: `/admin/entities/${schema.id}`,
    objectValues,
    objects: objects.map((o: any) => `/admin/object_entities/${o.id}`),
  };
};
